#!/usr/bin/env python

"""
iterate over files matching the patter (bed files generated by  filter genes)
and generate a single file where each line is a gene and the columns
tell you if that genes if properly capture (by the definition in
filter genes).

WARNING: Genes that failed for all the samples will not show up in the output
         with the current method
"""

from collections import defaultdict
import drdcommon
import argparse, sys
import glob
import re

if len(sys.argv) != 3:
  sys.stderr.write("tool <file_pattern> <pattern_to_extract_id> > out.bed" + "\n")
  sys.exit(1)

out = sys.stdout.write
err = sys.stderr.write

file_pattern, re_id = sys.argv[1], re.compile(sys.argv[2])
err("re for id: %s\n" % (re_id))

# Load data for all genes all samples
data = {}
ids = []
for f in drdcommon.files_in_dir(".", file_pattern):
  # extract sample id
  match = re_id.search(f)
  if match:
    _id = match.group(1)
  else:
    raise(Exception("Problems extracting id for: " + f))

  err("Working on id: %s\n" % (_id) )
  ids.append(_id)

  first_line = True
  for l in drdcommon.xopen(f):
    if first_line:
      first_line = False
      continue

    chrm, start, end, g_name = l.strip().split()
    start, end = int(start), int(end)

    k = "%s %s %s" % (chrm, start, end)
    if k not in data:
      data[k] = {}
      data[k]["coor"]    = [ chrm, start, end, g_name ]
      data[k]["samples"] = {}

    data[k]["samples"][_id] = True # This sample (_id) passes the filters for that gene

# Dump results
# header
out("chrm\tstart\tend\tgene\t")
for i in ids:
  out("%s\t" % i)
out("")

for k, v in data.items():
  chrm, start, end, g_name = v["coor"]
  out("%s\t%s\t%s\t%s" % (chrm, start, end, g_name))

  _ = []
  for _id in ids:
    if _id in v["samples"]:
      _.append("1")
    else:
      _.append("0")

  out("\t".join(_) + "\n")
